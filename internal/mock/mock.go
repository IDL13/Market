// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	entity "github.com/IDL13/Market/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Reset mocks base method.
func (m *MockUseCase) Reset() int8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(int8)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockUseCaseMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockUseCase)(nil).Reset))
}

// Save mocks base method.
func (m *MockUseCase) Save(request io.ReadCloser) int8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", request)
	ret0, _ := ret[0].(int8)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUseCaseMockRecorder) Save(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUseCase)(nil).Save), request)
}

// Show mocks base method.
func (m *MockUseCase) Show(request io.ReadCloser) []entity.Statistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", request)
	ret0, _ := ret[0].([]entity.Statistics)
	return ret0
}

// Show indicates an expected call of Show.
func (mr *MockUseCaseMockRecorder) Show(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockUseCase)(nil).Show), request)
}

// MockGRPCUseCase is a mock of GRPCUseCase interface.
type MockGRPCUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCUseCaseMockRecorder
}

// MockGRPCUseCaseMockRecorder is the mock recorder for MockGRPCUseCase.
type MockGRPCUseCaseMockRecorder struct {
	mock *MockGRPCUseCase
}

// NewMockGRPCUseCase creates a new mock instance.
func NewMockGRPCUseCase(ctrl *gomock.Controller) *MockGRPCUseCase {
	mock := &MockGRPCUseCase{ctrl: ctrl}
	mock.recorder = &MockGRPCUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCUseCase) EXPECT() *MockGRPCUseCaseMockRecorder {
	return m.recorder
}

// GRPCSave mocks base method.
func (m *MockGRPCUseCase) GRPCSave(date string, views, clicks int32, coast float32) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GRPCSave", date, views, clicks, coast)
	ret0, _ := ret[0].(int32)
	return ret0
}

// GRPCSave indicates an expected call of GRPCSave.
func (mr *MockGRPCUseCaseMockRecorder) GRPCSave(date, views, clicks, coast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GRPCSave", reflect.TypeOf((*MockGRPCUseCase)(nil).GRPCSave), date, views, clicks, coast)
}

// GRPCShow mocks base method.
func (m *MockGRPCUseCase) GRPCShow(from, to string) []entity.Statistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GRPCShow", from, to)
	ret0, _ := ret[0].([]entity.Statistics)
	return ret0
}

// GRPCShow indicates an expected call of GRPCShow.
func (mr *MockGRPCUseCaseMockRecorder) GRPCShow(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GRPCShow", reflect.TypeOf((*MockGRPCUseCase)(nil).GRPCShow), from, to)
}

// Reset mocks base method.
func (m *MockGRPCUseCase) Reset() int8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(int8)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockGRPCUseCaseMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockGRPCUseCase)(nil).Reset))
}

// Mockreset is a mock of reset interface.
type Mockreset struct {
	ctrl     *gomock.Controller
	recorder *MockresetMockRecorder
}

// MockresetMockRecorder is the mock recorder for Mockreset.
type MockresetMockRecorder struct {
	mock *Mockreset
}

// NewMockreset creates a new mock instance.
func NewMockreset(ctrl *gomock.Controller) *Mockreset {
	mock := &Mockreset{ctrl: ctrl}
	mock.recorder = &MockresetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockreset) EXPECT() *MockresetMockRecorder {
	return m.recorder
}

// Reset mocks base method.
func (m *Mockreset) Reset() int8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(int8)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockresetMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*Mockreset)(nil).Reset))
}

// Mocksave is a mock of save interface.
type Mocksave struct {
	ctrl     *gomock.Controller
	recorder *MocksaveMockRecorder
}

// MocksaveMockRecorder is the mock recorder for Mocksave.
type MocksaveMockRecorder struct {
	mock *Mocksave
}

// NewMocksave creates a new mock instance.
func NewMocksave(ctrl *gomock.Controller) *Mocksave {
	mock := &Mocksave{ctrl: ctrl}
	mock.recorder = &MocksaveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksave) EXPECT() *MocksaveMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *Mocksave) Save(request io.ReadCloser) int8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", request)
	ret0, _ := ret[0].(int8)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MocksaveMockRecorder) Save(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*Mocksave)(nil).Save), request)
}

// Mockshow is a mock of show interface.
type Mockshow struct {
	ctrl     *gomock.Controller
	recorder *MockshowMockRecorder
}

// MockshowMockRecorder is the mock recorder for Mockshow.
type MockshowMockRecorder struct {
	mock *Mockshow
}

// NewMockshow creates a new mock instance.
func NewMockshow(ctrl *gomock.Controller) *Mockshow {
	mock := &Mockshow{ctrl: ctrl}
	mock.recorder = &MockshowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockshow) EXPECT() *MockshowMockRecorder {
	return m.recorder
}

// Show mocks base method.
func (m *Mockshow) Show(request io.ReadCloser) []entity.Statistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", request)
	ret0, _ := ret[0].([]entity.Statistics)
	return ret0
}

// Show indicates an expected call of Show.
func (mr *MockshowMockRecorder) Show(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*Mockshow)(nil).Show), request)
}
